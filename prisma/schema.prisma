// This is your Prisma schema file

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  subcategories Subcategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TypeMicronutrient {
  VITAMIN              @map("Vitamina")
  MINERAL              @map("Mineral")
  FATTY_ACID           @map("Ácido graso")
  AMINO_ACID           @map("Aminoácido")
  ANTIOXIDANT_COMPOUND @map("Antioxidante")
  PROBIOTIC            @map("Probiótico")
  PHYTONUTRIENT        @map("Fitonutriente")
}

enum AllergenType {
  NONE      @map("Ninguno")
  GLUTEN    @map("Gluten")
  LACTOSE   @map("Lactosa")
  NUTS      @map("Frutos secos")
  PEANUTS   @map("Cacahuetes")
  SOY       @map("Soja")
  EGGS      @map("Huevos")
  FISH      @map("Pescado")
  SHELLFISH @map("Marisco")
  CELERY    @map("Apio")
  MUSTARD   @map("Mostaza")
  SESAME    @map("Sésamo")
  SULFITES  @map("Sulfitos")
  LUPIN     @map("Altramuces")
  MOLLUSCS  @map("Moluscos")
}

enum OriginType {
  ANIMAL    @map("Animal")
  VEGETAL   @map("Vegetal")
  SYNTHETIC @map("Sintético")
  MINERAL   @map("Mineral")
  MICROBIAL @map("Microbial")
}

enum AdditiveType {
  NO              @map("No es aditivo")
  SWEETENER       @map("Edulcorante")
  PRESERVATIVE    @map("Conservante")
  COLORANT        @map("Colorante")
  EMULSIFIER      @map("Emulsionante")
  FLAVOR_ENHANCER @map("Potenciador del sabor")
  STABILIZER      @map("Estabilizador")
  THICKENER       @map("Espesante")
}

enum RiskLevel {
  NONE   @map("Ninguno")
  LOW    @map("Bajo")
  MEDIUM @map("Medio")
  HIGH   @map("Alto")
}

enum RiskType {
  CARCINOGENIC        @map("Carcinogénico")
  ALLERGENIC          @map("Alergénico")
  INFLAMMATORY        @map("Inflamatorio")
  ENDOCRINE_DISRUPTOR @map("Disruptor endocrino")
  NEUROTOXIC          @map("Neurotóxico")
  MUTAGENIC           @map("Mutagénico")
  HEPATOTOXIC         @map("Hepatotóxico")
  CARDIOTOXIC         @map("Cardiotóxico")
  OBESOGENIC          @map("Obesogénico")
  HIGH_GI             @map("Alto índice glucémico")
  ADDICTIVE           @map("Adictivo")
  CONTAMINANTS        @map("Contaminantes")
  ANTINUTRIENTS       @map("Antinutrientes")
}

model Ingredient {
  id                 Int                       @id @default(autoincrement())
  name               String                    @db.VarChar(100)
  scientificName     String?                   @db.VarChar(100)
  isBasicFood        Boolean                   @default(false)
  description        String?                   @db.Text
  allergenType       AllergenType              @default(NONE)
  origin             OriginType
  additiveType       AdditiveType              @default(NO)
  servingSize        Decimal?                  @db.Decimal(10, 2)
  servingMeasurement String?                   @db.VarChar(20)
  calories           Decimal                   @db.Decimal(10, 2)
  proteins           Decimal?                  @db.Decimal(10, 2)
  carbohydrates      Decimal?                  @db.Decimal(10, 2)
  sugars             Decimal?                  @db.Decimal(10, 2)
  fats               Decimal?                  @db.Decimal(10, 2)
  saturatedFats      Decimal?                  @db.Decimal(10, 2)
  fiber              Decimal?                  @db.Decimal(10, 2)
  risks              IngredientRisk[]
  micronutrients     IngredientMicronutrient[]
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt

  @@map("ingredients")
}

model IngredientRisk {
  id           String     @id @default(uuid())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  riskType     RiskType
  level        RiskLevel  @default(NONE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([ingredientId, riskType])
  @@map("ingredient_risks")
}

model Micronutrient {
  id                  String                    @id @default(uuid())
  name                String                    @db.VarChar(100)
  description         String?                   @db.Text
  type                TypeMicronutrient
  properties          String?                   @db.VarChar(100)
  unit                String                    @db.VarChar(20)
  dailyRecommendation Decimal?                  @db.Decimal(10, 2)
  ingredients         IngredientMicronutrient[]
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt

  @@map("micronutrients")
}

model IngredientMicronutrient {
  ingredient      Ingredient    @relation(fields: [ingredientId], references: [id])
  ingredientId    Int
  micronutrient   Micronutrient @relation(fields: [micronutrientId], references: [id])
  micronutrientId String
  amount          Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@id([ingredientId, micronutrientId])
  @@map("ingredient_micronutrients")
}
